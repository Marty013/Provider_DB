#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.36213
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Provider_DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PROVIDER_DB")]
	public partial class PROVIDER_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertagreements(agreements instance);
    partial void Updateagreements(agreements instance);
    partial void Deleteagreements(agreements instance);
    partial void Inserttransactions(transactions instance);
    partial void Updatetransactions(transactions instance);
    partial void Deletetransactions(transactions instance);
    partial void Insertco_workers(co_workers instance);
    partial void Updateco_workers(co_workers instance);
    partial void Deleteco_workers(co_workers instance);
    partial void Insertcoverage_areas(coverage_areas instance);
    partial void Updatecoverage_areas(coverage_areas instance);
    partial void Deletecoverage_areas(coverage_areas instance);
    partial void Insertrates(rates instance);
    partial void Updaterates(rates instance);
    partial void Deleterates(rates instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    #endregion
		
		public PROVIDER_DBDataContext() : 
				base(global::Provider_DB.Properties.Settings.Default.PROVIDER_DBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PROVIDER_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PROVIDER_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PROVIDER_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PROVIDER_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<agreements> agreements
		{
			get
			{
				return this.GetTable<agreements>();
			}
		}
		
		public System.Data.Linq.Table<transactions> transactions
		{
			get
			{
				return this.GetTable<transactions>();
			}
		}
		
		public System.Data.Linq.Table<co_workers> co_workers
		{
			get
			{
				return this.GetTable<co_workers>();
			}
		}
		
		public System.Data.Linq.Table<coverage_areas> coverage_areas
		{
			get
			{
				return this.GetTable<coverage_areas>();
			}
		}
		
		public System.Data.Linq.Table<rates> rates
		{
			get
			{
				return this.GetTable<rates>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.agreements")]
	public partial class agreements : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _agreement_id;
		
		private int _id_user;
		
		private int _balance;
		
		private string _login;
		
		private string _password;
		
		private int _id_coverage_area;
		
		private int _num_apartment;
		
		private System.DateTime _date_connection;
		
		private int _id_co_worker;
		
		private int _id_rate;
		
		private EntitySet<transactions> _transactions;
		
		private EntityRef<co_workers> _co_workers;
		
		private EntityRef<coverage_areas> _coverage_areas;
		
		private EntityRef<rates> _rates;
		
		private EntityRef<users> _users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onagreement_idChanging(int value);
    partial void Onagreement_idChanged();
    partial void Onid_userChanging(int value);
    partial void Onid_userChanged();
    partial void OnbalanceChanging(int value);
    partial void OnbalanceChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onid_coverage_areaChanging(int value);
    partial void Onid_coverage_areaChanged();
    partial void Onnum_apartmentChanging(int value);
    partial void Onnum_apartmentChanged();
    partial void Ondate_connectionChanging(System.DateTime value);
    partial void Ondate_connectionChanged();
    partial void Onid_co_workerChanging(int value);
    partial void Onid_co_workerChanged();
    partial void Onid_rateChanging(int value);
    partial void Onid_rateChanged();
    #endregion
		
		public agreements()
		{
			this._transactions = new EntitySet<transactions>(new Action<transactions>(this.attach_transactions), new Action<transactions>(this.detach_transactions));
			this._co_workers = default(EntityRef<co_workers>);
			this._coverage_areas = default(EntityRef<coverage_areas>);
			this._rates = default(EntityRef<rates>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_agreement_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int agreement_id
		{
			get
			{
				return this._agreement_id;
			}
			set
			{
				if ((this._agreement_id != value))
				{
					this.Onagreement_idChanging(value);
					this.SendPropertyChanging();
					this._agreement_id = value;
					this.SendPropertyChanged("agreement_id");
					this.Onagreement_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", DbType="Int NOT NULL")]
		public int id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_userChanging(value);
					this.SendPropertyChanging();
					this._id_user = value;
					this.SendPropertyChanged("id_user");
					this.Onid_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balance", DbType="Int NOT NULL")]
		public int balance
		{
			get
			{
				return this._balance;
			}
			set
			{
				if ((this._balance != value))
				{
					this.OnbalanceChanging(value);
					this.SendPropertyChanging();
					this._balance = value;
					this.SendPropertyChanged("balance");
					this.OnbalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_coverage_area", DbType="Int NOT NULL")]
		public int id_coverage_area
		{
			get
			{
				return this._id_coverage_area;
			}
			set
			{
				if ((this._id_coverage_area != value))
				{
					if (this._coverage_areas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_coverage_areaChanging(value);
					this.SendPropertyChanging();
					this._id_coverage_area = value;
					this.SendPropertyChanged("id_coverage_area");
					this.Onid_coverage_areaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num_apartment", DbType="Int NOT NULL")]
		public int num_apartment
		{
			get
			{
				return this._num_apartment;
			}
			set
			{
				if ((this._num_apartment != value))
				{
					this.Onnum_apartmentChanging(value);
					this.SendPropertyChanging();
					this._num_apartment = value;
					this.SendPropertyChanged("num_apartment");
					this.Onnum_apartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_connection", DbType="Date NOT NULL")]
		public System.DateTime date_connection
		{
			get
			{
				return this._date_connection;
			}
			set
			{
				if ((this._date_connection != value))
				{
					this.Ondate_connectionChanging(value);
					this.SendPropertyChanging();
					this._date_connection = value;
					this.SendPropertyChanged("date_connection");
					this.Ondate_connectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_co_worker", DbType="Int NOT NULL")]
		public int id_co_worker
		{
			get
			{
				return this._id_co_worker;
			}
			set
			{
				if ((this._id_co_worker != value))
				{
					if (this._co_workers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_co_workerChanging(value);
					this.SendPropertyChanging();
					this._id_co_worker = value;
					this.SendPropertyChanged("id_co_worker");
					this.Onid_co_workerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_rate", DbType="Int NOT NULL")]
		public int id_rate
		{
			get
			{
				return this._id_rate;
			}
			set
			{
				if ((this._id_rate != value))
				{
					if (this._rates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_rateChanging(value);
					this.SendPropertyChanging();
					this._id_rate = value;
					this.SendPropertyChanged("id_rate");
					this.Onid_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="agreements_transactions", Storage="_transactions", ThisKey="agreement_id", OtherKey="id_agreement")]
		public EntitySet<transactions> transactions
		{
			get
			{
				return this._transactions;
			}
			set
			{
				this._transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="co_workers_agreements", Storage="_co_workers", ThisKey="id_co_worker", OtherKey="co_worker_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public co_workers co_workers
		{
			get
			{
				return this._co_workers.Entity;
			}
			set
			{
				co_workers previousValue = this._co_workers.Entity;
				if (((previousValue != value) 
							|| (this._co_workers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._co_workers.Entity = null;
						previousValue.agreements.Remove(this);
					}
					this._co_workers.Entity = value;
					if ((value != null))
					{
						value.agreements.Add(this);
						this._id_co_worker = value.co_worker_id;
					}
					else
					{
						this._id_co_worker = default(int);
					}
					this.SendPropertyChanged("co_workers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="coverage_areas_agreements", Storage="_coverage_areas", ThisKey="id_coverage_area", OtherKey="coverage_area_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public coverage_areas coverage_areas
		{
			get
			{
				return this._coverage_areas.Entity;
			}
			set
			{
				coverage_areas previousValue = this._coverage_areas.Entity;
				if (((previousValue != value) 
							|| (this._coverage_areas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._coverage_areas.Entity = null;
						previousValue.agreements.Remove(this);
					}
					this._coverage_areas.Entity = value;
					if ((value != null))
					{
						value.agreements.Add(this);
						this._id_coverage_area = value.coverage_area_id;
					}
					else
					{
						this._id_coverage_area = default(int);
					}
					this.SendPropertyChanged("coverage_areas");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rates_agreements", Storage="_rates", ThisKey="id_rate", OtherKey="rate_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public rates rates
		{
			get
			{
				return this._rates.Entity;
			}
			set
			{
				rates previousValue = this._rates.Entity;
				if (((previousValue != value) 
							|| (this._rates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rates.Entity = null;
						previousValue.agreements.Remove(this);
					}
					this._rates.Entity = value;
					if ((value != null))
					{
						value.agreements.Add(this);
						this._id_rate = value.rate_id;
					}
					else
					{
						this._id_rate = default(int);
					}
					this.SendPropertyChanged("rates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_agreements", Storage="_users", ThisKey="id_user", OtherKey="user_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.agreements.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.agreements.Add(this);
						this._id_user = value.user_id;
					}
					else
					{
						this._id_user = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_transactions(transactions entity)
		{
			this.SendPropertyChanging();
			entity.agreements = this;
		}
		
		private void detach_transactions(transactions entity)
		{
			this.SendPropertyChanging();
			entity.agreements = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transactions")]
	public partial class transactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _transaction_id;
		
		private int _id_agreement;
		
		private string _operation_type;
		
		private int _transaction_amount;
		
		private System.DateTime _transaction_date;
		
		private EntityRef<agreements> _agreements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontransaction_idChanging(int value);
    partial void Ontransaction_idChanged();
    partial void Onid_agreementChanging(int value);
    partial void Onid_agreementChanged();
    partial void Onoperation_typeChanging(string value);
    partial void Onoperation_typeChanged();
    partial void Ontransaction_amountChanging(int value);
    partial void Ontransaction_amountChanged();
    partial void Ontransaction_dateChanging(System.DateTime value);
    partial void Ontransaction_dateChanged();
    #endregion
		
		public transactions()
		{
			this._agreements = default(EntityRef<agreements>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transaction_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int transaction_id
		{
			get
			{
				return this._transaction_id;
			}
			set
			{
				if ((this._transaction_id != value))
				{
					this.Ontransaction_idChanging(value);
					this.SendPropertyChanging();
					this._transaction_id = value;
					this.SendPropertyChanged("transaction_id");
					this.Ontransaction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_agreement", DbType="Int NOT NULL")]
		public int id_agreement
		{
			get
			{
				return this._id_agreement;
			}
			set
			{
				if ((this._id_agreement != value))
				{
					if (this._agreements.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_agreementChanging(value);
					this.SendPropertyChanging();
					this._id_agreement = value;
					this.SendPropertyChanged("id_agreement");
					this.Onid_agreementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operation_type", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string operation_type
		{
			get
			{
				return this._operation_type;
			}
			set
			{
				if ((this._operation_type != value))
				{
					this.Onoperation_typeChanging(value);
					this.SendPropertyChanging();
					this._operation_type = value;
					this.SendPropertyChanged("operation_type");
					this.Onoperation_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transaction_amount", DbType="Int NOT NULL")]
		public int transaction_amount
		{
			get
			{
				return this._transaction_amount;
			}
			set
			{
				if ((this._transaction_amount != value))
				{
					this.Ontransaction_amountChanging(value);
					this.SendPropertyChanging();
					this._transaction_amount = value;
					this.SendPropertyChanged("transaction_amount");
					this.Ontransaction_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transaction_date", DbType="Date NOT NULL")]
		public System.DateTime transaction_date
		{
			get
			{
				return this._transaction_date;
			}
			set
			{
				if ((this._transaction_date != value))
				{
					this.Ontransaction_dateChanging(value);
					this.SendPropertyChanging();
					this._transaction_date = value;
					this.SendPropertyChanged("transaction_date");
					this.Ontransaction_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="agreements_transactions", Storage="_agreements", ThisKey="id_agreement", OtherKey="agreement_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public agreements agreements
		{
			get
			{
				return this._agreements.Entity;
			}
			set
			{
				agreements previousValue = this._agreements.Entity;
				if (((previousValue != value) 
							|| (this._agreements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._agreements.Entity = null;
						previousValue.transactions.Remove(this);
					}
					this._agreements.Entity = value;
					if ((value != null))
					{
						value.transactions.Add(this);
						this._id_agreement = value.agreement_id;
					}
					else
					{
						this._id_agreement = default(int);
					}
					this.SendPropertyChanged("agreements");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.co_workers")]
	public partial class co_workers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _co_worker_id;
		
		private string _co_worker_surname;
		
		private string _co_worker_name;
		
		private string _co_worker_patronymic;
		
		private int _co_worker_passport_data;
		
		private string _co_worker_address;
		
		private int _co_worker_contact_phone_num;
		
		private string _post;
		
		private int _salary;
		
		private EntitySet<agreements> _agreements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onco_worker_idChanging(int value);
    partial void Onco_worker_idChanged();
    partial void Onco_worker_surnameChanging(string value);
    partial void Onco_worker_surnameChanged();
    partial void Onco_worker_nameChanging(string value);
    partial void Onco_worker_nameChanged();
    partial void Onco_worker_patronymicChanging(string value);
    partial void Onco_worker_patronymicChanged();
    partial void Onco_worker_passport_dataChanging(int value);
    partial void Onco_worker_passport_dataChanged();
    partial void Onco_worker_addressChanging(string value);
    partial void Onco_worker_addressChanged();
    partial void Onco_worker_contact_phone_numChanging(int value);
    partial void Onco_worker_contact_phone_numChanged();
    partial void OnpostChanging(string value);
    partial void OnpostChanged();
    partial void OnsalaryChanging(int value);
    partial void OnsalaryChanged();
    #endregion
		
		public co_workers()
		{
			this._agreements = new EntitySet<agreements>(new Action<agreements>(this.attach_agreements), new Action<agreements>(this.detach_agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int co_worker_id
		{
			get
			{
				return this._co_worker_id;
			}
			set
			{
				if ((this._co_worker_id != value))
				{
					this.Onco_worker_idChanging(value);
					this.SendPropertyChanging();
					this._co_worker_id = value;
					this.SendPropertyChanged("co_worker_id");
					this.Onco_worker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_surname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string co_worker_surname
		{
			get
			{
				return this._co_worker_surname;
			}
			set
			{
				if ((this._co_worker_surname != value))
				{
					this.Onco_worker_surnameChanging(value);
					this.SendPropertyChanging();
					this._co_worker_surname = value;
					this.SendPropertyChanged("co_worker_surname");
					this.Onco_worker_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string co_worker_name
		{
			get
			{
				return this._co_worker_name;
			}
			set
			{
				if ((this._co_worker_name != value))
				{
					this.Onco_worker_nameChanging(value);
					this.SendPropertyChanging();
					this._co_worker_name = value;
					this.SendPropertyChanged("co_worker_name");
					this.Onco_worker_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_patronymic", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string co_worker_patronymic
		{
			get
			{
				return this._co_worker_patronymic;
			}
			set
			{
				if ((this._co_worker_patronymic != value))
				{
					this.Onco_worker_patronymicChanging(value);
					this.SendPropertyChanging();
					this._co_worker_patronymic = value;
					this.SendPropertyChanged("co_worker_patronymic");
					this.Onco_worker_patronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_passport_data", DbType="Int NOT NULL")]
		public int co_worker_passport_data
		{
			get
			{
				return this._co_worker_passport_data;
			}
			set
			{
				if ((this._co_worker_passport_data != value))
				{
					this.Onco_worker_passport_dataChanging(value);
					this.SendPropertyChanging();
					this._co_worker_passport_data = value;
					this.SendPropertyChanged("co_worker_passport_data");
					this.Onco_worker_passport_dataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string co_worker_address
		{
			get
			{
				return this._co_worker_address;
			}
			set
			{
				if ((this._co_worker_address != value))
				{
					this.Onco_worker_addressChanging(value);
					this.SendPropertyChanging();
					this._co_worker_address = value;
					this.SendPropertyChanged("co_worker_address");
					this.Onco_worker_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_co_worker_contact_phone_num", DbType="Int NOT NULL")]
		public int co_worker_contact_phone_num
		{
			get
			{
				return this._co_worker_contact_phone_num;
			}
			set
			{
				if ((this._co_worker_contact_phone_num != value))
				{
					this.Onco_worker_contact_phone_numChanging(value);
					this.SendPropertyChanging();
					this._co_worker_contact_phone_num = value;
					this.SendPropertyChanged("co_worker_contact_phone_num");
					this.Onco_worker_contact_phone_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string post
		{
			get
			{
				return this._post;
			}
			set
			{
				if ((this._post != value))
				{
					this.OnpostChanging(value);
					this.SendPropertyChanging();
					this._post = value;
					this.SendPropertyChanged("post");
					this.OnpostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int NOT NULL")]
		public int salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="co_workers_agreements", Storage="_agreements", ThisKey="co_worker_id", OtherKey="id_co_worker")]
		public EntitySet<agreements> agreements
		{
			get
			{
				return this._agreements;
			}
			set
			{
				this._agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.co_workers = this;
		}
		
		private void detach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.co_workers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.coverage_areas")]
	public partial class coverage_areas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _coverage_area_id;
		
		private string _district;
		
		private string _street;
		
		private int _num_house;
		
		private EntitySet<agreements> _agreements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncoverage_area_idChanging(int value);
    partial void Oncoverage_area_idChanged();
    partial void OndistrictChanging(string value);
    partial void OndistrictChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void Onnum_houseChanging(int value);
    partial void Onnum_houseChanged();
    #endregion
		
		public coverage_areas()
		{
			this._agreements = new EntitySet<agreements>(new Action<agreements>(this.attach_agreements), new Action<agreements>(this.detach_agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coverage_area_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int coverage_area_id
		{
			get
			{
				return this._coverage_area_id;
			}
			set
			{
				if ((this._coverage_area_id != value))
				{
					this.Oncoverage_area_idChanging(value);
					this.SendPropertyChanging();
					this._coverage_area_id = value;
					this.SendPropertyChanged("coverage_area_id");
					this.Oncoverage_area_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_district", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string district
		{
			get
			{
				return this._district;
			}
			set
			{
				if ((this._district != value))
				{
					this.OndistrictChanging(value);
					this.SendPropertyChanging();
					this._district = value;
					this.SendPropertyChanged("district");
					this.OndistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num_house", DbType="Int NOT NULL")]
		public int num_house
		{
			get
			{
				return this._num_house;
			}
			set
			{
				if ((this._num_house != value))
				{
					this.Onnum_houseChanging(value);
					this.SendPropertyChanging();
					this._num_house = value;
					this.SendPropertyChanged("num_house");
					this.Onnum_houseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="coverage_areas_agreements", Storage="_agreements", ThisKey="coverage_area_id", OtherKey="id_coverage_area")]
		public EntitySet<agreements> agreements
		{
			get
			{
				return this._agreements;
			}
			set
			{
				this._agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.coverage_areas = this;
		}
		
		private void detach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.coverage_areas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rates")]
	public partial class rates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rate_id;
		
		private string _name_rate;
		
		private string _description;
		
		private System.DateTime _validity;
		
		private int _cost;
		
		private string _note;
		
		private EntitySet<agreements> _agreements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrate_idChanging(int value);
    partial void Onrate_idChanged();
    partial void Onname_rateChanging(string value);
    partial void Onname_rateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnvalidityChanging(System.DateTime value);
    partial void OnvalidityChanged();
    partial void OncostChanging(int value);
    partial void OncostChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public rates()
		{
			this._agreements = new EntitySet<agreements>(new Action<agreements>(this.attach_agreements), new Action<agreements>(this.detach_agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rate_id
		{
			get
			{
				return this._rate_id;
			}
			set
			{
				if ((this._rate_id != value))
				{
					this.Onrate_idChanging(value);
					this.SendPropertyChanging();
					this._rate_id = value;
					this.SendPropertyChanged("rate_id");
					this.Onrate_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_rate", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string name_rate
		{
			get
			{
				return this._name_rate;
			}
			set
			{
				if ((this._name_rate != value))
				{
					this.Onname_rateChanging(value);
					this.SendPropertyChanging();
					this._name_rate = value;
					this.SendPropertyChanged("name_rate");
					this.Onname_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_validity", DbType="Date NOT NULL")]
		public System.DateTime validity
		{
			get
			{
				return this._validity;
			}
			set
			{
				if ((this._validity != value))
				{
					this.OnvalidityChanging(value);
					this.SendPropertyChanging();
					this._validity = value;
					this.SendPropertyChanged("validity");
					this.OnvalidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Int NOT NULL")]
		public int cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rates_agreements", Storage="_agreements", ThisKey="rate_id", OtherKey="id_rate")]
		public EntitySet<agreements> agreements
		{
			get
			{
				return this._agreements;
			}
			set
			{
				this._agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.rates = this;
		}
		
		private void detach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.rates = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _user_surname;
		
		private string _user_name;
		
		private string _user_patronymic;
		
		private int _user_passport_data;
		
		private string _user_address;
		
		private int _user_contact_phone_num;
		
		private EntitySet<agreements> _agreements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser_surnameChanging(string value);
    partial void Onuser_surnameChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void Onuser_patronymicChanging(string value);
    partial void Onuser_patronymicChanged();
    partial void Onuser_passport_dataChanging(int value);
    partial void Onuser_passport_dataChanged();
    partial void Onuser_addressChanging(string value);
    partial void Onuser_addressChanged();
    partial void Onuser_contact_phone_numChanging(int value);
    partial void Onuser_contact_phone_numChanged();
    #endregion
		
		public users()
		{
			this._agreements = new EntitySet<agreements>(new Action<agreements>(this.attach_agreements), new Action<agreements>(this.detach_agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_surname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string user_surname
		{
			get
			{
				return this._user_surname;
			}
			set
			{
				if ((this._user_surname != value))
				{
					this.Onuser_surnameChanging(value);
					this.SendPropertyChanging();
					this._user_surname = value;
					this.SendPropertyChanged("user_surname");
					this.Onuser_surnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_patronymic", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string user_patronymic
		{
			get
			{
				return this._user_patronymic;
			}
			set
			{
				if ((this._user_patronymic != value))
				{
					this.Onuser_patronymicChanging(value);
					this.SendPropertyChanging();
					this._user_patronymic = value;
					this.SendPropertyChanged("user_patronymic");
					this.Onuser_patronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_passport_data", DbType="Int NOT NULL")]
		public int user_passport_data
		{
			get
			{
				return this._user_passport_data;
			}
			set
			{
				if ((this._user_passport_data != value))
				{
					this.Onuser_passport_dataChanging(value);
					this.SendPropertyChanging();
					this._user_passport_data = value;
					this.SendPropertyChanged("user_passport_data");
					this.Onuser_passport_dataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string user_address
		{
			get
			{
				return this._user_address;
			}
			set
			{
				if ((this._user_address != value))
				{
					this.Onuser_addressChanging(value);
					this.SendPropertyChanging();
					this._user_address = value;
					this.SendPropertyChanged("user_address");
					this.Onuser_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_contact_phone_num", DbType="Int NOT NULL")]
		public int user_contact_phone_num
		{
			get
			{
				return this._user_contact_phone_num;
			}
			set
			{
				if ((this._user_contact_phone_num != value))
				{
					this.Onuser_contact_phone_numChanging(value);
					this.SendPropertyChanging();
					this._user_contact_phone_num = value;
					this.SendPropertyChanged("user_contact_phone_num");
					this.Onuser_contact_phone_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_agreements", Storage="_agreements", ThisKey="user_id", OtherKey="id_user")]
		public EntitySet<agreements> agreements
		{
			get
			{
				return this._agreements;
			}
			set
			{
				this._agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_agreements(agreements entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
}
#pragma warning restore 1591
